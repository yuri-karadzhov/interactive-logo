'use strict';

import path from 'path';
import webpack from 'webpack';
import browserslist from 'browserslist';
import autoprefixer from 'autoprefixer';
import ExtractTextPlugin from 'extract-text-webpack-plugin';
import HtmlWebpackPlugin from 'html-webpack-plugin';

import cfg from './build.config';

const IS_DEVELOPMENT = process.env.NODE_ENV !== 'production';
const contextPath = path.join(__dirname, 'src');
const outputPath = path.join(__dirname, 'dist');
const config = {
  context: contextPath,
  entry: {
    index: ['./index']
  },
  output: {
    path: outputPath,
    publicPath: '/',
    filename: '[name].js'
  },
  resolve: {
    extensions: ['.js', '.scss']
  },
  devtool: IS_DEVELOPMENT ? false : 'source-map',
  plugins: [
    new webpack.LoaderOptionsPlugin({
      options: {
        sassLoader: {
          data: `$is_development: ${IS_DEVELOPMENT};`
        },
        postcss: [autoprefixer({
          browsers: browserslist(null, {
            path: cfg.ext.browserslist
          })
        })],
        debug: IS_DEVELOPMENT,

        // temporary until the following issues wouldn't be resolved:
        // - https://github.com/bholloway/resolve-url-loader/issues/33
        // - https://github.com/webpack/webpack/issues/3018
        context: contextPath,
        output: {
          path: outputPath
        }
      }
    }),
    new webpack.NoErrorsPlugin(),
    new webpack.DefinePlugin({
      IS_DEVELOPMENT: JSON.stringify(IS_DEVELOPMENT)
    }),
    new ExtractTextPlugin({
      filename: '[name].css',
      allChunks: true,
      disable: IS_DEVELOPMENT
    }),
    new HtmlWebpackPlugin ({
      inject: true,
      template: 'index.html',
      minify: IS_DEVELOPMENT ? false : {
        includeAutoGeneratedTags: true,
        collapseWhitespace: true
      }
    })
  ],
  module: {
    loaders: [{
      test: /\.scss$/,
      include: path.join(__dirname, 'src'),
      loader: IS_DEVELOPMENT ?
        'style!css!resolve-url!sass' :
        ExtractTextPlugin.extract('css?minimize!postcss!resolve-url!sass')
    }, {
      test: /\.(png|jpg|svg|ttf|eot|woff|woff2)$/,
      include: path.join(__dirname, 'src/textures'),
      loader: 'file-loader?name=[path][name].[ext]'
    }, {
      test: /\.(png|jpg|svg|ttf|eot|woff|woff2)$/,
      exclude: path.join(__dirname, 'src/textures'),
      loader: 'url-loader?limit=10000&name=[path][name].[ext]'
    }, {
      test: /\.json/,
      include: path.join(__dirname, 'src/models'),
      loader: 'file-loader?name=[path][name].[ext]'
    }, {
      test: /\.json/,
      include: path.join(__dirname, 'src/fonts'),
      loader: 'file-loader?name=[path][name].[ext]'
    }, {
      test: /\.view.html/,
      loader: 'html-loader'
    }]
  },
  devServer: {
    watchOptions: {
      aggregateTimeout: 100
    },
    contentPath: 'dist/',
    historyApiFalback: true
  }
};

if(!IS_DEVELOPMENT) {
  config.module.loaders.push({
    test: /\.js$/,
    include: path.join(__dirname, 'src'),
    loader: 'babel',
    query: {
      babelrc: false,
      presets: [
        [
          'es2015',
          {
              modules: false
          }
        ]
      ]
    }
  });
  config.plugins.push(
      new webpack.optimize.UglifyJsPlugin({
        compress: {
          warnings:     false,
          'drop_console': true,
          unsafe:       true
        }
      })
  );
}

export default config;
